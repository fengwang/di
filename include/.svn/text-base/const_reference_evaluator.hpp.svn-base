#ifndef _CONST_REFERENCE_HPP_INCLUDED_SKJ389UAF890U43OJAFSDILJ34IOWFLSKJSFOIJEIJ
#define _CONST_REFERENCE_HPP_INCLUDED_SKJ389UAF890U43OJAFSDILJ34IOWFLSKJSFOIJEIJ


namespace feng{


template< typename T >
struct const_reference_evaluator
{
	typedef const T& 		result_type; 
};

template< typename T >
struct const_reference_evaluator<T&>
{
	typedef const T& 		result_type; 
};

template< typename T >
struct const_reference_evaluator<const T>
{
	typedef const T& 		result_type;
};


template< typename T >
struct const_reference_evaluator<const T&>
{
	typedef const T& 		result_type;
};


///specializaitons



///non-const

template<>
struct const_reference_evaluator<bool>
{
	typedef bool 			result_type;
};

template<>
struct const_reference_evaluator<bool&>
{
	typedef bool 			result_type;
};


template<>
struct const_reference_evaluator<char>
{
	typedef char 			result_type;
};

template<>
struct const_reference_evaluator<char&>
{
	typedef char 			result_type;
};


template<>
struct const_reference_evaluator<unsigned char>
{
	typedef unsigned char 			result_type;
};

template<>
struct const_reference_evaluator<unsigned char&>
{
	typedef unsigned char 			result_type;
};


template<>
struct const_reference_evaluator<short>
{
	typedef short 			result_type;
};

template<>
struct const_reference_evaluator<short&>
{
	typedef short 			result_type;
};


template<>
struct const_reference_evaluator<unsigned short>
{
	typedef unsigned short 			result_type;
};

template<>
struct const_reference_evaluator<unsigned short&>
{
	typedef unsigned short 			result_type;
};



template<>
struct const_reference_evaluator<int>
{
	typedef int 			result_type;
};

template<>
struct const_reference_evaluator<int&>
{
	typedef int 			result_type;
};


template<>
struct const_reference_evaluator<unsigned int>
{
	typedef unsigned int 			result_type;
};

template<>
struct const_reference_evaluator<unsigned int&>
{
	typedef unsigned int 			result_type;
};


template<>
struct const_reference_evaluator<long>
{
	typedef long 			result_type;
};

template<>
struct const_reference_evaluator<long&>
{
	typedef long 			result_type;
};


template<>
struct const_reference_evaluator<unsigned long>
{
	typedef unsigned long 			result_type;
};

template<>
struct const_reference_evaluator<unsigned long&>
{
	typedef unsigned long 			result_type;
};


template<>
struct const_reference_evaluator<long long>
{
	typedef long long 			result_type;
};

template<>
struct const_reference_evaluator<long long&>
{
	typedef long long 			result_type;
};


template<>
struct const_reference_evaluator<unsigned long long>
{
	typedef unsigned long long 	result_type;
};

template<>
struct const_reference_evaluator<unsigned long long&>
{
	typedef unsigned long long 	result_type;
};



template<>
struct const_reference_evaluator<float>
{
	typedef float 			result_type;
};

template<>
struct const_reference_evaluator<float&>
{
	typedef float 			result_type;
};


template<>
struct const_reference_evaluator<double>
{
	typedef double 			result_type;
};

template<>
struct const_reference_evaluator<double&>
{
	typedef double 			result_type;
};


template<>
struct const_reference_evaluator<long double>
{
	typedef long double 	result_type;
};

template<>
struct const_reference_evaluator<long double&>
{
	typedef long double 	result_type;
};


///const case


template<>
struct const_reference_evaluator<const bool>
{
	typedef bool 			result_type;
};

template<>
struct const_reference_evaluator<const bool&>
{
	typedef bool 			result_type;
};


template<>
struct const_reference_evaluator<const char>
{
	typedef char 			result_type;
};

template<>
struct const_reference_evaluator<const char&>
{
	typedef char 			result_type;
};


template<>
struct const_reference_evaluator<const unsigned char>
{
	typedef unsigned char 			result_type;
};

template<>
struct const_reference_evaluator<const unsigned char&>
{
	typedef unsigned char 			result_type;
};


template<>
struct const_reference_evaluator<const short>
{
	typedef short 			result_type;
};

template<>
struct const_reference_evaluator<const short&>
{
	typedef short 			result_type;
};


template<>
struct const_reference_evaluator<const unsigned short>
{
	typedef unsigned short 			result_type;
};

template<>
struct const_reference_evaluator<const unsigned short&>
{
	typedef unsigned short 			result_type;
};



template<>
struct const_reference_evaluator<const int>
{
	typedef int 			result_type;
};

template<>
struct const_reference_evaluator<const int&>
{
	typedef int 			result_type;
};


template<>
struct const_reference_evaluator<const unsigned int>
{
	typedef unsigned int 			result_type;
};

template<>
struct const_reference_evaluator<const unsigned int&>
{
	typedef unsigned int 			result_type;
};


template<>
struct const_reference_evaluator<const long>
{
	typedef long 			result_type;
};

template<>
struct const_reference_evaluator<const long&>
{
	typedef long 			result_type;
};


template<>
struct const_reference_evaluator<const unsigned long>
{
	typedef unsigned long 			result_type;
};

template<>
struct const_reference_evaluator<const unsigned long&>
{
	typedef unsigned long 			result_type;
};


template<>
struct const_reference_evaluator<const long long>
{
	typedef long long 			result_type;
};

template<>
struct const_reference_evaluator<const long long&>
{
	typedef long long 			result_type;
};


template<>
struct const_reference_evaluator<const unsigned long long>
{
	typedef unsigned long long 	result_type;
};

template<>
struct const_reference_evaluator<const unsigned long long&>
{
	typedef unsigned long long 	result_type;
};



template<>
struct const_reference_evaluator<const float>
{
	typedef float 			result_type;
};

template<>
struct const_reference_evaluator<const float&>
{
	typedef float 			result_type;
};


template<>
struct const_reference_evaluator<const double>
{
	typedef double 			result_type;
};

template<>
struct const_reference_evaluator<const double&>
{
	typedef double 			result_type;
};


template<>
struct const_reference_evaluator<const long double>
{
	typedef long double 	result_type;
};

template<>
struct const_reference_evaluator<const long double&>
{
	typedef long double 	result_type;
};






}//namespace feng



#endif//_CONST_REFERENCE_HPP_INCLUDED_SKJ389UAF890U43OJAFSDILJ34IOWFLSKJSFOIJEIJ



